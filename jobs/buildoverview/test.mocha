var assert = require ('assert');
var buildoverview = require ('./buildoverview');
var project_to_plans = require ('./lib/project_to_plans');
var get_responsible = require ('./lib/get_responsible');
var get_plan_info = require ('./lib/get_plan_info');
var get_build_info = require ('./lib/get_build_info');

describe ('buildoverview', function(){

  var config;

  beforeEach(function(done){
    config = {
        interval: 20000,
        failBuilds: ["CONFUI-QUNITFFESR", "CONFUI-QUNITFFLATEST", "CONFUI-QUNITCHROMEPLUGINS" , "CONFUI-QUNITCHROMELATEST", "CONFUI-QUNITQCFFLATEST", "CONFUI-QUNITQEFFLATEST11"],
        showBuilds: [],
        widgetTitle: "QUNIT BUILDS"
    };

    config.globalAuth = {
        cbac: {
            username: "myusername",
            password: "secretpassword"
        }
    };
    done();
  });

  // ------------------------------------------
  //  Test fetching responsability
  // ------------------------------------------
  describe ('responsability', function(){

    it('should return the correct users for a certain html chunk', function(done){
      var body = "<div id=page><div class=responsible-summary><ul>" +
          "<li><img src=\"\"><a href=\"\">username</a></li>" +
          "<li><img src=\"\"><a href=\"\">username 2</a></li>" +
        "</ul></div></div>";

      var dependencies = {
        request: function(options, callback){
          callback(null, {statusCode : 200}, body);
        }
      };

      var buildKey = "test";
      var auth = "";
      get_responsible(buildKey, auth, dependencies.request, false, function(err, users){
        assert.ok (!err);
        assert.equal (users.length, 2);
        assert.equal (users[1].name, "username 2");
        done();
      });
    });


    it('should return error if there is an error during the http call', function(done){
      var dependencies = {
        request: function(options, callback){
          callback("err", {statusCode : 500}, "{}");
        }
      };

      var buildKey = "test";
      var auth = "";
      get_responsible(buildKey, auth, dependencies.request, false, function(err, users){
        assert.ok (err);
        assert.ok (!users);
        done();
      });
    });

  });


  // ------------------------------------------
  //  Test converting projects to plans
  // ------------------------------------------
  describe ('project_to_plans', function(){

    it('should be a valid build string', function(done){
      var dependencies = {
        request: function(options, callback){
          callback(null, {statusCode : 200}, "{}");
        }
      };

      var buildKey = "";
      var auth = "";
      project_to_plans(buildKey, auth, dependencies.request, function(err, plans){
        assert.ok(err);
        done();
      });
    });


    it('should return one plan if dash found in build (plan key)', function(done){
      var response = "{}";
      var dependencies = {
        request: function(options, callback){
          callback(null, {statusCode : 200}, response);
        }
      };

      var buildKey = "test-test";
      var auth = "";
      project_to_plans(buildKey, auth, dependencies.request, function(err, plans){
        assert.ok (!err);
        assert.equal (plans.length, 1);
        done();
      });
    });

  });

  // ------------------------------------------
  //  Test fetching plan info
  // ------------------------------------------
  describe ('get_plan_info', function(){

    it('should return plan info', function(done){

      var response = "{\"planName\":\"Main Build\"}";
      var dependencies = {
        request: function(options, callback){
          callback(null, {statusCode : 200}, response);
        }
      };

      var plan = "TEST";
      var auth = "";

      get_plan_info(plan, auth, dependencies.request, function(err, plan_info){
        assert.ok (!err);
        assert.ok (plan_info.planName);
        done();
      });
    });


    it('should handle error if server return error', function(done){

      var dependencies = {
        request: function(options, callback){
          callback("error", {statusCode : 500}, null);
        }
      };

      var plan = "TEST";
      var auth = "";

      get_plan_info(plan, auth, dependencies.request, function(err, plan_info){
        assert.ok (err);
        assert.ok (!plan_info);
        done();
      });
    });


    it('should handle error if server return ok status code but json is invalid', function(done){

      var dependencies = {
        request: function(options, callback){
          callback(null, {statusCode : 200}, "-invalid json-");
        }
      };

      var plan = "TEST";
      var auth = "";

      get_plan_info(plan, auth, dependencies.request, function(err, plan_info){
        assert.ok (err);
        assert.ok (!plan_info);
        done();
      });
    });

  });


  // ------------------------------------------
  //  Test fetching build info
  // ------------------------------------------
  describe ('get_build_info', function(){

    it('should handle error if server return ok status code but json is invalid', function(done){

      var dependencies = {
        request: function(options, callback){
          callback(null, {statusCode : 200}, "-invalid json-");
        }
      };

      var plan = "TEST";
      var auth = "";

      get_build_info(plan, auth, dependencies.request, function(err, build_info){
        assert.ok (err);
        assert.ok (!build_info);
        done();
      });
    });
  });


  // ------------------------------------------
  //  build_overview main
  // ------------------------------------------
  describe ('build_overview', function(){
    var config;

    beforeEach(function(done){
      config = {
        interval : 20000,
        failBuilds:["CONFUI-QUNITFFESR", "CONFUI-QUNITFFLATEST", "CONFUI-QUNITCHROMEPLUGINS" , "CONFUI-QUNITCHROMELATEST", "CONFUI-QUNITQCFFLATEST", "CONFUI-QUNITQEFFLATEST11"],
        showBuilds:["COD-MSATP", "COD"],
        widgetTitle : "QUNIT BUILDS"
      };

      config.globalAuth = {
          cbac: {
              username: "myusername",
              password: "secretpassword"
          }
      };
      done();
    });


    it('should return array of data', function(done){

      var dependencies = {
        request: function(options, callback){
          callback(null, {statusCode : 200}, "{\"results\": {\"result\": [] }}");
        }
      };

      var widgets = {
        sendData : function(data){
          assert.ok(!data.error);
          assert.ok(data.showBuilds.length);
          assert.ok(data.failBuilds.length);

          assert.ok(!data.failBuilds[0].length);
          done();
        }
      };

      buildoverview(widgets, config, dependencies);
    });
  });

});